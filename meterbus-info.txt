Decode the value of a single record (record 3)
        #!/usr/bin/python

        import meterbus

        data = "\x68\x6A\x6A\x68\x08\x01\x72\x43\x53\x93\x07\x65" \
              "\x32\x10\x04\xCA\x00\x00\x00\x0C\x05\x14\x00\x00" \
              "\x00\x0C\x13\x13\x20\x00\x00\x0B\x22\x01\x24\x03" \
              "\x04\x6D\x12\x0B\xD3\x12\x32\x6C\x00\x00\x0C\x78" \
              "\x43\x53\x93\x07\x06\xFD\x0C\xF2\x03\x01\x00\xF6" \
              "\x01\x0D\xFD\x0B\x05\x31\x32\x4D\x46\x57\x01\xFD" \
              "\x0E\x00\x4C\x05\x14\x00\x00\x00\x4C\x13\x13\x20" \
              "\x00\x00\x42\x6C\xBF\x1C\x0F\x37\xFD\x17\x00\x00" \
              "\x00\x00\x00\x00\x00\x00\x02\x7A\x25\x00\x02\x78" \
              "\x25\x00\x3A\x16"

        telegram = meterbus.load(data)
        print telegram.records[3].parsed_value

Request a frame over Serial and dump it in JSON format\
        #!/usr/bin/python

        import serial
        import meterbus

        address = 254

        with serial.Serial('/dev/ttyACM0', 2400, 8, 'E', 1, 0.5) as ser:
          meterbus.send_ping_frame(ser, address)
          frame = meterbus.load(meterbus.recv_frame(ser, 1))
          assert isinstance(frame, meterbus.TelegramACK)

          meterbus.send_request_frame(ser, address)
          frame = meterbus.load(meterbus.recv_frame(ser, meterbus.FRAME_DATA_LENGTH))
          assert isinstance(frame, meterbus.TelegramLong)

          print(frame.to_JSON())


Goedenavond,

Ben inmiddels een aardig eind met het aan elkaar knopen van een Pi met mijn Kamstrup Multical 302 en een chinese MBus-USB-master (via Aliexpress). Tot twee weken geleden absoluut geen ervaring hiermee, maar leer het redelijk vlot. Tot mijn verbazing werkt het uitlezen van de warmtemeter met deze MBus-USB-master van iets meer dan twee tientjes. :)

Found a M-Bus device at address 35
Met mbus-serial-request-data -d -b 2400 /dev/ttyUSB0 35 zie ik de meetgegevens.

Volgende stap is het zichtbaar maken van deze data in Domoticz / InfluxDB / Grafana.
Wie wil dit nog eens eenvoudig aan mij uitleggen?
Alvast bedankt!




@darthMonkey
What is your question?
The example code directly gives the desired values in JSON format. So:
- do you know the adress of the multical?
- do you know the ubs port?
- where do you want the values to go?

code:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
#!/usr/bin/python

import serial
import meterbus

address = 254

with serial.Serial('/dev/ttyACM0', 2400, 8, 'E', 1, 0.5) as ser:
  meterbus.send_ping_frame(ser, address)
  frame = meterbus.load(meterbus.recv_frame(ser, 1))
  assert isinstance(frame, meterbus.TelegramACK)

  meterbus.send_request_frame(ser, address)
  frame = meterbus.load(meterbus.recv_frame(ser, meterbus.FRAME_DATA_LENGTH))
  assert isinstance(frame, meterbus.TelegramLong)

  print(frame.to_JSON())





  https://the78mole.de/taking-your-m-bus-online-with-mqtt/

  mbus-serial-scan -b 2400 /dev/ttyUSB0 
Collision at address 0
Found a M-Bus device at address 110
pi@garagepi:~ $ mbus-serial-scan-secondary -b 2400 /dev/ttyUSB0
Found a device on secondary address 0000873987050402 [using address mask 0FFFFFFFFFFFFFFF]
Found a device on secondary address 10223908496A8804 [using address mask 1FFFFFFFFFFFFFFF]
Found a device on secondary address 35001739496A8804 [using address mask 3500173FFFFFFFFF]
Found a device on secondary address 35001740496A8804 [using address mask 3500174FFFFFFFFF]

pi@garagepi:~/GIT/libmbus $ mbus-serial-request-data -b 2400 /dev/ttyUSB0 0000873987050402
<?xml version="1.0" encoding="ISO-8859-1"?>
<MBusData>
    <SlaveInformation>
        <Id>8739</Id>
        <Manufacturer>ALG</Manufacturer>
        <Version>4</Version>
        <ProductName></ProductName>
        <Medium>Electricity</Medium>
        <AccessNumber>2</AccessNumber>
        <Status>00</Status>
        <Signature>0000</Signature>
    </SlaveInformation>
[...]
    <DataRecord id="16">
        <Function>Instantaneous value</Function>
        <StorageNumber>0</StorageNumber>
        <Tariff>0</Tariff>
        <Device>0</Device>
        <Unit>Manufacturer specific</Unit>
        <Value>0</Value>
        <Timestamp>2021-07-06T12:44:20Z</Timestamp>
    </DataRecord>

    <DataRecord id="17">
        <Function>More records follow</Function>
        <Value></Value>
        <Timestamp>2021-07-06T12:44:20Z</Timestamp>
    </DataRecord>
</MBusData>





mbus-serial-request-data -b 2400 /dev/ttyUSB0 0000873987050402 | xq .
 {
   "MBusData": {
     "SlaveInformation": {
       "Id": "8739",
       "Manufacturer": "ALG",
       "Version": "4",
       "ProductName": null,
       "Medium": "Electricity",
       "AccessNumber": "5",
       "Status": "00",
       "Signature": "0000"
     },
     "DataRecord": [
       {
         "@id": "0",
         "Function": "Instantaneous value",
         "StorageNumber": "0",
         "Tariff": "1",
         "Device": "2",
         "Unit": "Manufacturer specific",
         "Value": "1800",
         "Timestamp": "2021-07-06T13:09:09Z"
       },
[...]
      {
        "@id": "16",
        "Function": "Instantaneous value",
        "StorageNumber": "0",
        "Tariff": "1",
        "Device": "0",
        "Unit": "Manufacturer specific",
        "Value": "1707949",
        "Timestamp": "2021-07-06T13:09:09Z"
      },
      {
        "@id": "17",
        "Function": "More records follow",
        "Value": null,
        "Timestamp": "2021-07-06T13:09:09Z"
      }
    ]
  }
}







